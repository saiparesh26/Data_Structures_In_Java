package com.saiparesh.queue;

public class Queue {
	
	private int maxSize;  // Initializes hte number of slots
	private long[] queueArray; // Slots to main data
	private int front;  // Index position for the element in the front
	private int rear;   // Index position for the element at the back
	private int nItems;  // Counter to maintain the number of items
	
	public Queue(int size) {
		this.maxSize = size;
		this.queueArray = new long[size];
		front = 0;   // Index position of the first element  
		rear = -1;	// there is not item in the array yet to be considered as the last item
		nItems = 0;  // We don't have elements
	}
	
	public void insert(long item) {
		if(rear == maxSize - 1) {
			rear = -1;
		}
		
		rear++;
		queueArray[rear] = item;
		nItems++;
	}
	
	public long remove() {  // remove item from the front of the queue
		long value = queueArray[front];
		front++;
		if(front == maxSize) {
			front = 0; // we can set front back to 0 so that we can utilize entire array again
		}
		nItems--;
		return value;
	}
	
	public long peekFront() {
		return queueArray[front];
	}
	
	public boolean isEmpty() {
		return (nItems == 0);
	}
	
	public boolean isFull() {
		return (nItems == maxSize);
	}
	
	public void view() {
		System.out.print("[ ");
		for(int i = 0 ; i< queueArray.length ; i++) {
			System.out.print(queueArray[i] + " ");
		}
		System.out.println("]");
	}
}
